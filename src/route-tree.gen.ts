/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { createFileRoute } from "@tanstack/react-router";

import { Route as rootRouteImport } from "./routes/__root";
import { Route as unauthorizedRouteRouteImport } from "./routes/(unauthorized)/route";
import { Route as defaultRouteRouteImport } from "./routes/(default)/route";
import { Route as authorizedRouteRouteImport } from "./routes/(authorized)/route";
import { Route as defaultIndexRouteImport } from "./routes/(default)/index";
import { Route as unauthorizedSignUpRouteImport } from "./routes/(unauthorized)/sign-up";
import { Route as unauthorizedSignInRouteImport } from "./routes/(unauthorized)/sign-in";
import { Route as authorizedChatRoomsRouteRouteImport } from "./routes/(authorized)/chat-rooms/route";
import { Route as authorizedMyIndexRouteImport } from "./routes/(authorized)/my/index";
import { Route as authorizedChatRoomsIndexRouteImport } from "./routes/(authorized)/chat-rooms/index";
import { Route as defaultProductsListRouteImport } from "./routes/(default)/products/_list";
import { Route as defaultProductsIdRouteImport } from "./routes/(default)/products/$id";
import { Route as authorizedProductsNewRouteImport } from "./routes/(authorized)/products/new";
import { Route as authorizedChatRoomsIdRouteImport } from "./routes/(authorized)/chat-rooms/$id";
import { Route as defaultProductsListIndexRouteImport } from "./routes/(default)/products/_list.index";

const defaultProductsRouteImport = createFileRoute("/(default)/products")();

const unauthorizedRouteRoute = unauthorizedRouteRouteImport.update({
  id: "/(unauthorized)",
  getParentRoute: () => rootRouteImport,
} as any);
const defaultRouteRoute = defaultRouteRouteImport.update({
  id: "/(default)",
  getParentRoute: () => rootRouteImport,
} as any);
const authorizedRouteRoute = authorizedRouteRouteImport.update({
  id: "/(authorized)",
  getParentRoute: () => rootRouteImport,
} as any);
const defaultProductsRoute = defaultProductsRouteImport.update({
  id: "/products",
  path: "/products",
  getParentRoute: () => defaultRouteRoute,
} as any);
const defaultIndexRoute = defaultIndexRouteImport.update({
  id: "/",
  path: "/",
  getParentRoute: () => defaultRouteRoute,
} as any);
const unauthorizedSignUpRoute = unauthorizedSignUpRouteImport.update({
  id: "/sign-up",
  path: "/sign-up",
  getParentRoute: () => unauthorizedRouteRoute,
} as any);
const unauthorizedSignInRoute = unauthorizedSignInRouteImport.update({
  id: "/sign-in",
  path: "/sign-in",
  getParentRoute: () => unauthorizedRouteRoute,
} as any);
const authorizedChatRoomsRouteRoute =
  authorizedChatRoomsRouteRouteImport.update({
    id: "/chat-rooms",
    path: "/chat-rooms",
    getParentRoute: () => authorizedRouteRoute,
  } as any);
const authorizedMyIndexRoute = authorizedMyIndexRouteImport.update({
  id: "/my/",
  path: "/my/",
  getParentRoute: () => authorizedRouteRoute,
} as any);
const authorizedChatRoomsIndexRoute =
  authorizedChatRoomsIndexRouteImport.update({
    id: "/",
    path: "/",
    getParentRoute: () => authorizedChatRoomsRouteRoute,
  } as any);
const defaultProductsListRoute = defaultProductsListRouteImport.update({
  id: "/_list",
  getParentRoute: () => defaultProductsRoute,
} as any);
const defaultProductsIdRoute = defaultProductsIdRouteImport.update({
  id: "/products/$id",
  path: "/products/$id",
  getParentRoute: () => defaultRouteRoute,
} as any);
const authorizedProductsNewRoute = authorizedProductsNewRouteImport.update({
  id: "/products/new",
  path: "/products/new",
  getParentRoute: () => authorizedRouteRoute,
} as any);
const authorizedChatRoomsIdRoute = authorizedChatRoomsIdRouteImport.update({
  id: "/$id",
  path: "/$id",
  getParentRoute: () => authorizedChatRoomsRouteRoute,
} as any);
const defaultProductsListIndexRoute =
  defaultProductsListIndexRouteImport.update({
    id: "/",
    path: "/",
    getParentRoute: () => defaultProductsListRoute,
  } as any);

export interface FileRoutesByFullPath {
  "/": typeof defaultIndexRoute;
  "/chat-rooms": typeof authorizedChatRoomsRouteRouteWithChildren;
  "/sign-in": typeof unauthorizedSignInRoute;
  "/sign-up": typeof unauthorizedSignUpRoute;
  "/chat-rooms/$id": typeof authorizedChatRoomsIdRoute;
  "/products/new": typeof authorizedProductsNewRoute;
  "/products/$id": typeof defaultProductsIdRoute;
  "/products": typeof defaultProductsListRouteWithChildren;
  "/chat-rooms/": typeof authorizedChatRoomsIndexRoute;
  "/my": typeof authorizedMyIndexRoute;
  "/products/": typeof defaultProductsListIndexRoute;
}
export interface FileRoutesByTo {
  "/": typeof defaultIndexRoute;
  "/sign-in": typeof unauthorizedSignInRoute;
  "/sign-up": typeof unauthorizedSignUpRoute;
  "/chat-rooms/$id": typeof authorizedChatRoomsIdRoute;
  "/products/new": typeof authorizedProductsNewRoute;
  "/products/$id": typeof defaultProductsIdRoute;
  "/products": typeof defaultProductsListIndexRoute;
  "/chat-rooms": typeof authorizedChatRoomsIndexRoute;
  "/my": typeof authorizedMyIndexRoute;
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport;
  "/(authorized)": typeof authorizedRouteRouteWithChildren;
  "/(default)": typeof defaultRouteRouteWithChildren;
  "/(unauthorized)": typeof unauthorizedRouteRouteWithChildren;
  "/(authorized)/chat-rooms": typeof authorizedChatRoomsRouteRouteWithChildren;
  "/(unauthorized)/sign-in": typeof unauthorizedSignInRoute;
  "/(unauthorized)/sign-up": typeof unauthorizedSignUpRoute;
  "/(default)/": typeof defaultIndexRoute;
  "/(authorized)/chat-rooms/$id": typeof authorizedChatRoomsIdRoute;
  "/(authorized)/products/new": typeof authorizedProductsNewRoute;
  "/(default)/products/$id": typeof defaultProductsIdRoute;
  "/(default)/products": typeof defaultProductsRouteWithChildren;
  "/(default)/products/_list": typeof defaultProductsListRouteWithChildren;
  "/(authorized)/chat-rooms/": typeof authorizedChatRoomsIndexRoute;
  "/(authorized)/my/": typeof authorizedMyIndexRoute;
  "/(default)/products/_list/": typeof defaultProductsListIndexRoute;
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath;
  fullPaths:
    | "/"
    | "/chat-rooms"
    | "/sign-in"
    | "/sign-up"
    | "/chat-rooms/$id"
    | "/products/new"
    | "/products/$id"
    | "/products"
    | "/chat-rooms/"
    | "/my"
    | "/products/";
  fileRoutesByTo: FileRoutesByTo;
  to:
    | "/"
    | "/sign-in"
    | "/sign-up"
    | "/chat-rooms/$id"
    | "/products/new"
    | "/products/$id"
    | "/products"
    | "/chat-rooms"
    | "/my";
  id:
    | "__root__"
    | "/(authorized)"
    | "/(default)"
    | "/(unauthorized)"
    | "/(authorized)/chat-rooms"
    | "/(unauthorized)/sign-in"
    | "/(unauthorized)/sign-up"
    | "/(default)/"
    | "/(authorized)/chat-rooms/$id"
    | "/(authorized)/products/new"
    | "/(default)/products/$id"
    | "/(default)/products"
    | "/(default)/products/_list"
    | "/(authorized)/chat-rooms/"
    | "/(authorized)/my/"
    | "/(default)/products/_list/";
  fileRoutesById: FileRoutesById;
}
export interface RootRouteChildren {
  authorizedRouteRoute: typeof authorizedRouteRouteWithChildren;
  defaultRouteRoute: typeof defaultRouteRouteWithChildren;
  unauthorizedRouteRoute: typeof unauthorizedRouteRouteWithChildren;
}

declare module "@tanstack/react-router" {
  interface FileRoutesByPath {
    "/(unauthorized)": {
      id: "/(unauthorized)";
      path: "/";
      fullPath: "/";
      preLoaderRoute: typeof unauthorizedRouteRouteImport;
      parentRoute: typeof rootRouteImport;
    };
    "/(default)": {
      id: "/(default)";
      path: "/";
      fullPath: "/";
      preLoaderRoute: typeof defaultRouteRouteImport;
      parentRoute: typeof rootRouteImport;
    };
    "/(authorized)": {
      id: "/(authorized)";
      path: "/";
      fullPath: "/";
      preLoaderRoute: typeof authorizedRouteRouteImport;
      parentRoute: typeof rootRouteImport;
    };
    "/(default)/products": {
      id: "/(default)/products";
      path: "/products";
      fullPath: "/products";
      preLoaderRoute: typeof defaultProductsRouteImport;
      parentRoute: typeof defaultRouteRoute;
    };
    "/(default)/": {
      id: "/(default)/";
      path: "/";
      fullPath: "/";
      preLoaderRoute: typeof defaultIndexRouteImport;
      parentRoute: typeof defaultRouteRoute;
    };
    "/(unauthorized)/sign-up": {
      id: "/(unauthorized)/sign-up";
      path: "/sign-up";
      fullPath: "/sign-up";
      preLoaderRoute: typeof unauthorizedSignUpRouteImport;
      parentRoute: typeof unauthorizedRouteRoute;
    };
    "/(unauthorized)/sign-in": {
      id: "/(unauthorized)/sign-in";
      path: "/sign-in";
      fullPath: "/sign-in";
      preLoaderRoute: typeof unauthorizedSignInRouteImport;
      parentRoute: typeof unauthorizedRouteRoute;
    };
    "/(authorized)/chat-rooms": {
      id: "/(authorized)/chat-rooms";
      path: "/chat-rooms";
      fullPath: "/chat-rooms";
      preLoaderRoute: typeof authorizedChatRoomsRouteRouteImport;
      parentRoute: typeof authorizedRouteRoute;
    };
    "/(authorized)/my/": {
      id: "/(authorized)/my/";
      path: "/my";
      fullPath: "/my";
      preLoaderRoute: typeof authorizedMyIndexRouteImport;
      parentRoute: typeof authorizedRouteRoute;
    };
    "/(authorized)/chat-rooms/": {
      id: "/(authorized)/chat-rooms/";
      path: "/";
      fullPath: "/chat-rooms/";
      preLoaderRoute: typeof authorizedChatRoomsIndexRouteImport;
      parentRoute: typeof authorizedChatRoomsRouteRoute;
    };
    "/(default)/products/_list": {
      id: "/(default)/products/_list";
      path: "/products";
      fullPath: "/products";
      preLoaderRoute: typeof defaultProductsListRouteImport;
      parentRoute: typeof defaultProductsRoute;
    };
    "/(default)/products/$id": {
      id: "/(default)/products/$id";
      path: "/products/$id";
      fullPath: "/products/$id";
      preLoaderRoute: typeof defaultProductsIdRouteImport;
      parentRoute: typeof defaultRouteRoute;
    };
    "/(authorized)/products/new": {
      id: "/(authorized)/products/new";
      path: "/products/new";
      fullPath: "/products/new";
      preLoaderRoute: typeof authorizedProductsNewRouteImport;
      parentRoute: typeof authorizedRouteRoute;
    };
    "/(authorized)/chat-rooms/$id": {
      id: "/(authorized)/chat-rooms/$id";
      path: "/$id";
      fullPath: "/chat-rooms/$id";
      preLoaderRoute: typeof authorizedChatRoomsIdRouteImport;
      parentRoute: typeof authorizedChatRoomsRouteRoute;
    };
    "/(default)/products/_list/": {
      id: "/(default)/products/_list/";
      path: "/";
      fullPath: "/products/";
      preLoaderRoute: typeof defaultProductsListIndexRouteImport;
      parentRoute: typeof defaultProductsListRoute;
    };
  }
}

interface authorizedChatRoomsRouteRouteChildren {
  authorizedChatRoomsIdRoute: typeof authorizedChatRoomsIdRoute;
  authorizedChatRoomsIndexRoute: typeof authorizedChatRoomsIndexRoute;
}

const authorizedChatRoomsRouteRouteChildren: authorizedChatRoomsRouteRouteChildren =
  {
    authorizedChatRoomsIdRoute: authorizedChatRoomsIdRoute,
    authorizedChatRoomsIndexRoute: authorizedChatRoomsIndexRoute,
  };

const authorizedChatRoomsRouteRouteWithChildren =
  authorizedChatRoomsRouteRoute._addFileChildren(
    authorizedChatRoomsRouteRouteChildren,
  );

interface authorizedRouteRouteChildren {
  authorizedChatRoomsRouteRoute: typeof authorizedChatRoomsRouteRouteWithChildren;
  authorizedProductsNewRoute: typeof authorizedProductsNewRoute;
  authorizedMyIndexRoute: typeof authorizedMyIndexRoute;
}

const authorizedRouteRouteChildren: authorizedRouteRouteChildren = {
  authorizedChatRoomsRouteRoute: authorizedChatRoomsRouteRouteWithChildren,
  authorizedProductsNewRoute: authorizedProductsNewRoute,
  authorizedMyIndexRoute: authorizedMyIndexRoute,
};

const authorizedRouteRouteWithChildren = authorizedRouteRoute._addFileChildren(
  authorizedRouteRouteChildren,
);

interface defaultProductsListRouteChildren {
  defaultProductsListIndexRoute: typeof defaultProductsListIndexRoute;
}

const defaultProductsListRouteChildren: defaultProductsListRouteChildren = {
  defaultProductsListIndexRoute: defaultProductsListIndexRoute,
};

const defaultProductsListRouteWithChildren =
  defaultProductsListRoute._addFileChildren(defaultProductsListRouteChildren);

interface defaultProductsRouteChildren {
  defaultProductsListRoute: typeof defaultProductsListRouteWithChildren;
}

const defaultProductsRouteChildren: defaultProductsRouteChildren = {
  defaultProductsListRoute: defaultProductsListRouteWithChildren,
};

const defaultProductsRouteWithChildren = defaultProductsRoute._addFileChildren(
  defaultProductsRouteChildren,
);

interface defaultRouteRouteChildren {
  defaultIndexRoute: typeof defaultIndexRoute;
  defaultProductsIdRoute: typeof defaultProductsIdRoute;
  defaultProductsRoute: typeof defaultProductsRouteWithChildren;
}

const defaultRouteRouteChildren: defaultRouteRouteChildren = {
  defaultIndexRoute: defaultIndexRoute,
  defaultProductsIdRoute: defaultProductsIdRoute,
  defaultProductsRoute: defaultProductsRouteWithChildren,
};

const defaultRouteRouteWithChildren = defaultRouteRoute._addFileChildren(
  defaultRouteRouteChildren,
);

interface unauthorizedRouteRouteChildren {
  unauthorizedSignInRoute: typeof unauthorizedSignInRoute;
  unauthorizedSignUpRoute: typeof unauthorizedSignUpRoute;
}

const unauthorizedRouteRouteChildren: unauthorizedRouteRouteChildren = {
  unauthorizedSignInRoute: unauthorizedSignInRoute,
  unauthorizedSignUpRoute: unauthorizedSignUpRoute,
};

const unauthorizedRouteRouteWithChildren =
  unauthorizedRouteRoute._addFileChildren(unauthorizedRouteRouteChildren);

const rootRouteChildren: RootRouteChildren = {
  authorizedRouteRoute: authorizedRouteRouteWithChildren,
  defaultRouteRoute: defaultRouteRouteWithChildren,
  unauthorizedRouteRoute: unauthorizedRouteRouteWithChildren,
};
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>();
