/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

// Import Routes

import { Route as rootRoute } from "./routes/__root";
import { Route as unauthorizedRouteImport } from "./routes/(unauthorized)/route";
import { Route as defaultRouteImport } from "./routes/(default)/route";
import { Route as defaultIndexImport } from "./routes/(default)/index";
import { Route as unauthorizedSignUpImport } from "./routes/(unauthorized)/sign-up";
import { Route as unauthorizedSignInImport } from "./routes/(unauthorized)/sign-in";
import { Route as defaultProductsIndexImport } from "./routes/(default)/products/index";
import { Route as defaultProductsIdImport } from "./routes/(default)/products/$id";

// Create/Update Routes

const unauthorizedRouteRoute = unauthorizedRouteImport.update({
  id: "/(unauthorized)",
  getParentRoute: () => rootRoute,
} as any);

const defaultRouteRoute = defaultRouteImport.update({
  id: "/(default)",
  getParentRoute: () => rootRoute,
} as any);

const defaultIndexRoute = defaultIndexImport.update({
  id: "/",
  path: "/",
  getParentRoute: () => defaultRouteRoute,
} as any);

const unauthorizedSignUpRoute = unauthorizedSignUpImport.update({
  id: "/sign-up",
  path: "/sign-up",
  getParentRoute: () => unauthorizedRouteRoute,
} as any);

const unauthorizedSignInRoute = unauthorizedSignInImport.update({
  id: "/sign-in",
  path: "/sign-in",
  getParentRoute: () => unauthorizedRouteRoute,
} as any);

const defaultProductsIndexRoute = defaultProductsIndexImport.update({
  id: "/products/",
  path: "/products/",
  getParentRoute: () => defaultRouteRoute,
} as any);

const defaultProductsIdRoute = defaultProductsIdImport.update({
  id: "/products/$id",
  path: "/products/$id",
  getParentRoute: () => defaultRouteRoute,
} as any);

// Populate the FileRoutesByPath interface

declare module "@tanstack/react-router" {
  interface FileRoutesByPath {
    "/(default)": {
      id: "/(default)";
      path: "/";
      fullPath: "/";
      preLoaderRoute: typeof defaultRouteImport;
      parentRoute: typeof rootRoute;
    };
    "/(unauthorized)": {
      id: "/(unauthorized)";
      path: "/";
      fullPath: "/";
      preLoaderRoute: typeof unauthorizedRouteImport;
      parentRoute: typeof rootRoute;
    };
    "/(unauthorized)/sign-in": {
      id: "/(unauthorized)/sign-in";
      path: "/sign-in";
      fullPath: "/sign-in";
      preLoaderRoute: typeof unauthorizedSignInImport;
      parentRoute: typeof unauthorizedRouteImport;
    };
    "/(unauthorized)/sign-up": {
      id: "/(unauthorized)/sign-up";
      path: "/sign-up";
      fullPath: "/sign-up";
      preLoaderRoute: typeof unauthorizedSignUpImport;
      parentRoute: typeof unauthorizedRouteImport;
    };
    "/(default)/": {
      id: "/(default)/";
      path: "/";
      fullPath: "/";
      preLoaderRoute: typeof defaultIndexImport;
      parentRoute: typeof defaultRouteImport;
    };
    "/(default)/products/$id": {
      id: "/(default)/products/$id";
      path: "/products/$id";
      fullPath: "/products/$id";
      preLoaderRoute: typeof defaultProductsIdImport;
      parentRoute: typeof defaultRouteImport;
    };
    "/(default)/products/": {
      id: "/(default)/products/";
      path: "/products";
      fullPath: "/products";
      preLoaderRoute: typeof defaultProductsIndexImport;
      parentRoute: typeof defaultRouteImport;
    };
  }
}

// Create and export the route tree

interface defaultRouteRouteChildren {
  defaultIndexRoute: typeof defaultIndexRoute;
  defaultProductsIdRoute: typeof defaultProductsIdRoute;
  defaultProductsIndexRoute: typeof defaultProductsIndexRoute;
}

const defaultRouteRouteChildren: defaultRouteRouteChildren = {
  defaultIndexRoute: defaultIndexRoute,
  defaultProductsIdRoute: defaultProductsIdRoute,
  defaultProductsIndexRoute: defaultProductsIndexRoute,
};

const defaultRouteRouteWithChildren = defaultRouteRoute._addFileChildren(
  defaultRouteRouteChildren,
);

interface unauthorizedRouteRouteChildren {
  unauthorizedSignInRoute: typeof unauthorizedSignInRoute;
  unauthorizedSignUpRoute: typeof unauthorizedSignUpRoute;
}

const unauthorizedRouteRouteChildren: unauthorizedRouteRouteChildren = {
  unauthorizedSignInRoute: unauthorizedSignInRoute,
  unauthorizedSignUpRoute: unauthorizedSignUpRoute,
};

const unauthorizedRouteRouteWithChildren =
  unauthorizedRouteRoute._addFileChildren(unauthorizedRouteRouteChildren);

export interface FileRoutesByFullPath {
  "/": typeof defaultIndexRoute;
  "/sign-in": typeof unauthorizedSignInRoute;
  "/sign-up": typeof unauthorizedSignUpRoute;
  "/products/$id": typeof defaultProductsIdRoute;
  "/products": typeof defaultProductsIndexRoute;
}

export interface FileRoutesByTo {
  "/": typeof defaultIndexRoute;
  "/sign-in": typeof unauthorizedSignInRoute;
  "/sign-up": typeof unauthorizedSignUpRoute;
  "/products/$id": typeof defaultProductsIdRoute;
  "/products": typeof defaultProductsIndexRoute;
}

export interface FileRoutesById {
  __root__: typeof rootRoute;
  "/(default)": typeof defaultRouteRouteWithChildren;
  "/(unauthorized)": typeof unauthorizedRouteRouteWithChildren;
  "/(unauthorized)/sign-in": typeof unauthorizedSignInRoute;
  "/(unauthorized)/sign-up": typeof unauthorizedSignUpRoute;
  "/(default)/": typeof defaultIndexRoute;
  "/(default)/products/$id": typeof defaultProductsIdRoute;
  "/(default)/products/": typeof defaultProductsIndexRoute;
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath;
  fullPaths: "/" | "/sign-in" | "/sign-up" | "/products/$id" | "/products";
  fileRoutesByTo: FileRoutesByTo;
  to: "/" | "/sign-in" | "/sign-up" | "/products/$id" | "/products";
  id:
    | "__root__"
    | "/(default)"
    | "/(unauthorized)"
    | "/(unauthorized)/sign-in"
    | "/(unauthorized)/sign-up"
    | "/(default)/"
    | "/(default)/products/$id"
    | "/(default)/products/";
  fileRoutesById: FileRoutesById;
}

export interface RootRouteChildren {
  defaultRouteRoute: typeof defaultRouteRouteWithChildren;
  unauthorizedRouteRoute: typeof unauthorizedRouteRouteWithChildren;
}

const rootRouteChildren: RootRouteChildren = {
  defaultRouteRoute: defaultRouteRouteWithChildren,
  unauthorizedRouteRoute: unauthorizedRouteRouteWithChildren,
};

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>();

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/(default)",
        "/(unauthorized)"
      ]
    },
    "/(default)": {
      "filePath": "(default)/route.tsx",
      "children": [
        "/(default)/",
        "/(default)/products/$id",
        "/(default)/products/"
      ]
    },
    "/(unauthorized)": {
      "filePath": "(unauthorized)/route.tsx",
      "children": [
        "/(unauthorized)/sign-in",
        "/(unauthorized)/sign-up"
      ]
    },
    "/(unauthorized)/sign-in": {
      "filePath": "(unauthorized)/sign-in.tsx",
      "parent": "/(unauthorized)"
    },
    "/(unauthorized)/sign-up": {
      "filePath": "(unauthorized)/sign-up.tsx",
      "parent": "/(unauthorized)"
    },
    "/(default)/": {
      "filePath": "(default)/index.tsx",
      "parent": "/(default)"
    },
    "/(default)/products/$id": {
      "filePath": "(default)/products/$id.tsx",
      "parent": "/(default)"
    },
    "/(default)/products/": {
      "filePath": "(default)/products/index.tsx",
      "parent": "/(default)"
    }
  }
}
ROUTE_MANIFEST_END */
