/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { createFileRoute } from "@tanstack/react-router";

// Import Routes

import { Route as rootRoute } from "./routes/__root";
import { Route as unauthorizedRouteImport } from "./routes/(unauthorized)/route";
import { Route as defaultRouteImport } from "./routes/(default)/route";
import { Route as authorizedRouteImport } from "./routes/(authorized)/route";
import { Route as defaultIndexImport } from "./routes/(default)/index";
import { Route as unauthorizedSignUpImport } from "./routes/(unauthorized)/sign-up";
import { Route as unauthorizedSignInImport } from "./routes/(unauthorized)/sign-in";
import { Route as authorizedMyIndexImport } from "./routes/(authorized)/my/index";
import { Route as authorizedChatroomsIndexImport } from "./routes/(authorized)/chatrooms/index";
import { Route as defaultProductsListImport } from "./routes/(default)/products/_list";
import { Route as defaultProductsIdImport } from "./routes/(default)/products/$id";
import { Route as authorizedProductsNewImport } from "./routes/(authorized)/products/new";
import { Route as defaultProductsListIndexImport } from "./routes/(default)/products/_list.index";

// Create Virtual Routes

const defaultProductsImport = createFileRoute("/(default)/products")();

// Create/Update Routes

const unauthorizedRouteRoute = unauthorizedRouteImport.update({
  id: "/(unauthorized)",
  getParentRoute: () => rootRoute,
} as any);

const defaultRouteRoute = defaultRouteImport.update({
  id: "/(default)",
  getParentRoute: () => rootRoute,
} as any);

const authorizedRouteRoute = authorizedRouteImport.update({
  id: "/(authorized)",
  getParentRoute: () => rootRoute,
} as any);

const defaultProductsRoute = defaultProductsImport.update({
  id: "/products",
  path: "/products",
  getParentRoute: () => defaultRouteRoute,
} as any);

const defaultIndexRoute = defaultIndexImport.update({
  id: "/",
  path: "/",
  getParentRoute: () => defaultRouteRoute,
} as any);

const unauthorizedSignUpRoute = unauthorizedSignUpImport.update({
  id: "/sign-up",
  path: "/sign-up",
  getParentRoute: () => unauthorizedRouteRoute,
} as any);

const unauthorizedSignInRoute = unauthorizedSignInImport.update({
  id: "/sign-in",
  path: "/sign-in",
  getParentRoute: () => unauthorizedRouteRoute,
} as any);

const authorizedMyIndexRoute = authorizedMyIndexImport.update({
  id: "/my/",
  path: "/my/",
  getParentRoute: () => authorizedRouteRoute,
} as any);

const authorizedChatroomsIndexRoute = authorizedChatroomsIndexImport.update({
  id: "/chatrooms/",
  path: "/chatrooms/",
  getParentRoute: () => authorizedRouteRoute,
} as any);

const defaultProductsListRoute = defaultProductsListImport.update({
  id: "/_list",
  getParentRoute: () => defaultProductsRoute,
} as any);

const defaultProductsIdRoute = defaultProductsIdImport.update({
  id: "/products/$id",
  path: "/products/$id",
  getParentRoute: () => defaultRouteRoute,
} as any);

const authorizedProductsNewRoute = authorizedProductsNewImport.update({
  id: "/products/new",
  path: "/products/new",
  getParentRoute: () => authorizedRouteRoute,
} as any);

const defaultProductsListIndexRoute = defaultProductsListIndexImport.update({
  id: "/",
  path: "/",
  getParentRoute: () => defaultProductsListRoute,
} as any);

// Populate the FileRoutesByPath interface

declare module "@tanstack/react-router" {
  interface FileRoutesByPath {
    "/(authorized)": {
      id: "/(authorized)";
      path: "/";
      fullPath: "/";
      preLoaderRoute: typeof authorizedRouteImport;
      parentRoute: typeof rootRoute;
    };
    "/(default)": {
      id: "/(default)";
      path: "/";
      fullPath: "/";
      preLoaderRoute: typeof defaultRouteImport;
      parentRoute: typeof rootRoute;
    };
    "/(unauthorized)": {
      id: "/(unauthorized)";
      path: "/";
      fullPath: "/";
      preLoaderRoute: typeof unauthorizedRouteImport;
      parentRoute: typeof rootRoute;
    };
    "/(unauthorized)/sign-in": {
      id: "/(unauthorized)/sign-in";
      path: "/sign-in";
      fullPath: "/sign-in";
      preLoaderRoute: typeof unauthorizedSignInImport;
      parentRoute: typeof unauthorizedRouteImport;
    };
    "/(unauthorized)/sign-up": {
      id: "/(unauthorized)/sign-up";
      path: "/sign-up";
      fullPath: "/sign-up";
      preLoaderRoute: typeof unauthorizedSignUpImport;
      parentRoute: typeof unauthorizedRouteImport;
    };
    "/(default)/": {
      id: "/(default)/";
      path: "/";
      fullPath: "/";
      preLoaderRoute: typeof defaultIndexImport;
      parentRoute: typeof defaultRouteImport;
    };
    "/(authorized)/products/new": {
      id: "/(authorized)/products/new";
      path: "/products/new";
      fullPath: "/products/new";
      preLoaderRoute: typeof authorizedProductsNewImport;
      parentRoute: typeof authorizedRouteImport;
    };
    "/(default)/products/$id": {
      id: "/(default)/products/$id";
      path: "/products/$id";
      fullPath: "/products/$id";
      preLoaderRoute: typeof defaultProductsIdImport;
      parentRoute: typeof defaultRouteImport;
    };
    "/(default)/products": {
      id: "/(default)/products";
      path: "/products";
      fullPath: "/products";
      preLoaderRoute: typeof defaultProductsImport;
      parentRoute: typeof defaultRouteImport;
    };
    "/(default)/products/_list": {
      id: "/(default)/products/_list";
      path: "/products";
      fullPath: "/products";
      preLoaderRoute: typeof defaultProductsListImport;
      parentRoute: typeof defaultProductsRoute;
    };
    "/(authorized)/chatrooms/": {
      id: "/(authorized)/chatrooms/";
      path: "/chatrooms";
      fullPath: "/chatrooms";
      preLoaderRoute: typeof authorizedChatroomsIndexImport;
      parentRoute: typeof authorizedRouteImport;
    };
    "/(authorized)/my/": {
      id: "/(authorized)/my/";
      path: "/my";
      fullPath: "/my";
      preLoaderRoute: typeof authorizedMyIndexImport;
      parentRoute: typeof authorizedRouteImport;
    };
    "/(default)/products/_list/": {
      id: "/(default)/products/_list/";
      path: "/";
      fullPath: "/products/";
      preLoaderRoute: typeof defaultProductsListIndexImport;
      parentRoute: typeof defaultProductsListImport;
    };
  }
}

// Create and export the route tree

interface authorizedRouteRouteChildren {
  authorizedProductsNewRoute: typeof authorizedProductsNewRoute;
  authorizedChatroomsIndexRoute: typeof authorizedChatroomsIndexRoute;
  authorizedMyIndexRoute: typeof authorizedMyIndexRoute;
}

const authorizedRouteRouteChildren: authorizedRouteRouteChildren = {
  authorizedProductsNewRoute: authorizedProductsNewRoute,
  authorizedChatroomsIndexRoute: authorizedChatroomsIndexRoute,
  authorizedMyIndexRoute: authorizedMyIndexRoute,
};

const authorizedRouteRouteWithChildren = authorizedRouteRoute._addFileChildren(
  authorizedRouteRouteChildren,
);

interface defaultProductsListRouteChildren {
  defaultProductsListIndexRoute: typeof defaultProductsListIndexRoute;
}

const defaultProductsListRouteChildren: defaultProductsListRouteChildren = {
  defaultProductsListIndexRoute: defaultProductsListIndexRoute,
};

const defaultProductsListRouteWithChildren =
  defaultProductsListRoute._addFileChildren(defaultProductsListRouteChildren);

interface defaultProductsRouteChildren {
  defaultProductsListRoute: typeof defaultProductsListRouteWithChildren;
}

const defaultProductsRouteChildren: defaultProductsRouteChildren = {
  defaultProductsListRoute: defaultProductsListRouteWithChildren,
};

const defaultProductsRouteWithChildren = defaultProductsRoute._addFileChildren(
  defaultProductsRouteChildren,
);

interface defaultRouteRouteChildren {
  defaultIndexRoute: typeof defaultIndexRoute;
  defaultProductsIdRoute: typeof defaultProductsIdRoute;
  defaultProductsRoute: typeof defaultProductsRouteWithChildren;
}

const defaultRouteRouteChildren: defaultRouteRouteChildren = {
  defaultIndexRoute: defaultIndexRoute,
  defaultProductsIdRoute: defaultProductsIdRoute,
  defaultProductsRoute: defaultProductsRouteWithChildren,
};

const defaultRouteRouteWithChildren = defaultRouteRoute._addFileChildren(
  defaultRouteRouteChildren,
);

interface unauthorizedRouteRouteChildren {
  unauthorizedSignInRoute: typeof unauthorizedSignInRoute;
  unauthorizedSignUpRoute: typeof unauthorizedSignUpRoute;
}

const unauthorizedRouteRouteChildren: unauthorizedRouteRouteChildren = {
  unauthorizedSignInRoute: unauthorizedSignInRoute,
  unauthorizedSignUpRoute: unauthorizedSignUpRoute,
};

const unauthorizedRouteRouteWithChildren =
  unauthorizedRouteRoute._addFileChildren(unauthorizedRouteRouteChildren);

export interface FileRoutesByFullPath {
  "/": typeof defaultIndexRoute;
  "/sign-in": typeof unauthorizedSignInRoute;
  "/sign-up": typeof unauthorizedSignUpRoute;
  "/products/new": typeof authorizedProductsNewRoute;
  "/products/$id": typeof defaultProductsIdRoute;
  "/products": typeof defaultProductsListRouteWithChildren;
  "/chatrooms": typeof authorizedChatroomsIndexRoute;
  "/my": typeof authorizedMyIndexRoute;
  "/products/": typeof defaultProductsListIndexRoute;
}

export interface FileRoutesByTo {
  "/": typeof defaultIndexRoute;
  "/sign-in": typeof unauthorizedSignInRoute;
  "/sign-up": typeof unauthorizedSignUpRoute;
  "/products/new": typeof authorizedProductsNewRoute;
  "/products/$id": typeof defaultProductsIdRoute;
  "/products": typeof defaultProductsListIndexRoute;
  "/chatrooms": typeof authorizedChatroomsIndexRoute;
  "/my": typeof authorizedMyIndexRoute;
}

export interface FileRoutesById {
  __root__: typeof rootRoute;
  "/(authorized)": typeof authorizedRouteRouteWithChildren;
  "/(default)": typeof defaultRouteRouteWithChildren;
  "/(unauthorized)": typeof unauthorizedRouteRouteWithChildren;
  "/(unauthorized)/sign-in": typeof unauthorizedSignInRoute;
  "/(unauthorized)/sign-up": typeof unauthorizedSignUpRoute;
  "/(default)/": typeof defaultIndexRoute;
  "/(authorized)/products/new": typeof authorizedProductsNewRoute;
  "/(default)/products/$id": typeof defaultProductsIdRoute;
  "/(default)/products": typeof defaultProductsRouteWithChildren;
  "/(default)/products/_list": typeof defaultProductsListRouteWithChildren;
  "/(authorized)/chatrooms/": typeof authorizedChatroomsIndexRoute;
  "/(authorized)/my/": typeof authorizedMyIndexRoute;
  "/(default)/products/_list/": typeof defaultProductsListIndexRoute;
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath;
  fullPaths:
    | "/"
    | "/sign-in"
    | "/sign-up"
    | "/products/new"
    | "/products/$id"
    | "/products"
    | "/chatrooms"
    | "/my"
    | "/products/";
  fileRoutesByTo: FileRoutesByTo;
  to:
    | "/"
    | "/sign-in"
    | "/sign-up"
    | "/products/new"
    | "/products/$id"
    | "/products"
    | "/chatrooms"
    | "/my";
  id:
    | "__root__"
    | "/(authorized)"
    | "/(default)"
    | "/(unauthorized)"
    | "/(unauthorized)/sign-in"
    | "/(unauthorized)/sign-up"
    | "/(default)/"
    | "/(authorized)/products/new"
    | "/(default)/products/$id"
    | "/(default)/products"
    | "/(default)/products/_list"
    | "/(authorized)/chatrooms/"
    | "/(authorized)/my/"
    | "/(default)/products/_list/";
  fileRoutesById: FileRoutesById;
}

export interface RootRouteChildren {
  authorizedRouteRoute: typeof authorizedRouteRouteWithChildren;
  defaultRouteRoute: typeof defaultRouteRouteWithChildren;
  unauthorizedRouteRoute: typeof unauthorizedRouteRouteWithChildren;
}

const rootRouteChildren: RootRouteChildren = {
  authorizedRouteRoute: authorizedRouteRouteWithChildren,
  defaultRouteRoute: defaultRouteRouteWithChildren,
  unauthorizedRouteRoute: unauthorizedRouteRouteWithChildren,
};

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>();

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/(authorized)",
        "/(default)",
        "/(unauthorized)"
      ]
    },
    "/(authorized)": {
      "filePath": "(authorized)/route.tsx",
      "children": [
        "/(authorized)/products/new",
        "/(authorized)/chatrooms/",
        "/(authorized)/my/"
      ]
    },
    "/(default)": {
      "filePath": "(default)/route.tsx",
      "children": [
        "/(default)/",
        "/(default)/products/$id",
        "/(default)/products"
      ]
    },
    "/(unauthorized)": {
      "filePath": "(unauthorized)/route.tsx",
      "children": [
        "/(unauthorized)/sign-in",
        "/(unauthorized)/sign-up"
      ]
    },
    "/(unauthorized)/sign-in": {
      "filePath": "(unauthorized)/sign-in.tsx",
      "parent": "/(unauthorized)"
    },
    "/(unauthorized)/sign-up": {
      "filePath": "(unauthorized)/sign-up.tsx",
      "parent": "/(unauthorized)"
    },
    "/(default)/": {
      "filePath": "(default)/index.tsx",
      "parent": "/(default)"
    },
    "/(authorized)/products/new": {
      "filePath": "(authorized)/products/new.tsx",
      "parent": "/(authorized)"
    },
    "/(default)/products/$id": {
      "filePath": "(default)/products/$id.tsx",
      "parent": "/(default)"
    },
    "/(default)/products": {
      "filePath": "(default)/products",
      "parent": "/(default)",
      "children": [
        "/(default)/products/_list"
      ]
    },
    "/(default)/products/_list": {
      "filePath": "(default)/products/_list.tsx",
      "parent": "/(default)/products",
      "children": [
        "/(default)/products/_list/"
      ]
    },
    "/(authorized)/chatrooms/": {
      "filePath": "(authorized)/chatrooms/index.tsx",
      "parent": "/(authorized)"
    },
    "/(authorized)/my/": {
      "filePath": "(authorized)/my/index.tsx",
      "parent": "/(authorized)"
    },
    "/(default)/products/_list/": {
      "filePath": "(default)/products/_list.index.tsx",
      "parent": "/(default)/products/_list"
    }
  }
}
ROUTE_MANIFEST_END */
